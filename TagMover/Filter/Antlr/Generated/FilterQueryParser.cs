//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FilterQuery.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class FilterQueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, FIELD=14, STRING=15, NUMBER=16, 
		REGEX=17, CHAR=18, WS=19;
	public const int
		RULE_query = 0, RULE_expression = 1;
	public static readonly string[] ruleNames = {
		"query", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'AND'", "'OR'", "'('", "')'", "'NOT'", "'MISSING'", "'PRESENT'", 
		"'HAS'", "'IS'", "'GREATER'", "'EQUAL'", "'LESS'", "'MATCHES'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "FIELD", "STRING", "NUMBER", "REGEX", "CHAR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FilterQuery.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FilterQueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FilterQueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FilterQueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrOperatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MissingOperatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(FilterQueryParser.FIELD, 0); }
		public MissingOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMissingOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOperatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOperatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(FilterQueryParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(FilterQueryParser.NUMBER, 0); }
		public GreaterOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketOperatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracketOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatchesOperatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(FilterQueryParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEX() { return GetToken(FilterQueryParser.REGEX, 0); }
		public MatchesOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchesOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessOperatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(FilterQueryParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(FilterQueryParser.NUMBER, 0); }
		public LessOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(FilterQueryParser.STRING, 0); }
		public StringContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualOperatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(FilterQueryParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(FilterQueryParser.NUMBER, 0); }
		public EqualOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HasOperatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(FilterQueryParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(FilterQueryParser.STRING, 0); }
		public HasOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotOperatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PresentOperatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(FilterQueryParser.FIELD, 0); }
		public PresentOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPresentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsOperatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(FilterQueryParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(FilterQueryParser.STRING, 0); }
		public IsOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterQueryVisitor<TResult> typedVisitor = visitor as IFilterQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new BracketOperatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 7;
				Match(T__2);
				State = 8;
				expression(0);
				State = 9;
				Match(T__3);
				}
				break;
			case 2:
				{
				_localctx = new NotOperatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 11;
				Match(T__4);
				State = 12;
				expression(10);
				}
				break;
			case 3:
				{
				_localctx = new MissingOperatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 13;
				Match(FIELD);
				State = 14;
				Match(T__5);
				}
				break;
			case 4:
				{
				_localctx = new PresentOperatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 15;
				Match(FIELD);
				State = 16;
				Match(T__6);
				}
				break;
			case 5:
				{
				_localctx = new HasOperatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 17;
				Match(FIELD);
				State = 18;
				Match(T__7);
				State = 19;
				Match(STRING);
				}
				break;
			case 6:
				{
				_localctx = new IsOperatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 20;
				Match(FIELD);
				State = 21;
				Match(T__8);
				State = 22;
				Match(STRING);
				}
				break;
			case 7:
				{
				_localctx = new GreaterOperatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 23;
				Match(FIELD);
				State = 24;
				Match(T__9);
				State = 25;
				Match(NUMBER);
				}
				break;
			case 8:
				{
				_localctx = new EqualOperatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26;
				Match(FIELD);
				State = 27;
				Match(T__10);
				State = 28;
				Match(NUMBER);
				}
				break;
			case 9:
				{
				_localctx = new LessOperatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 29;
				Match(FIELD);
				State = 30;
				Match(T__11);
				State = 31;
				Match(NUMBER);
				}
				break;
			case 10:
				{
				_localctx = new MatchesOperatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 32;
				Match(FIELD);
				State = 33;
				Match(T__12);
				State = 34;
				Match(REGEX);
				}
				break;
			case 11:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 35;
				Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 46;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 44;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new AndOperatorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 38;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 39;
						Match(T__0);
						State = 40;
						expression(14);
						}
						break;
					case 2:
						{
						_localctx = new OrOperatorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 41;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 42;
						Match(T__1);
						State = 43;
						expression(13);
						}
						break;
					}
					} 
				}
				State = 48;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', '\x34', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\'', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '/', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x32', 
		'\v', '\x3', '\x3', '\x3', '\x2', '\x3', '\x4', '\x4', '\x2', '\x4', '\x2', 
		'\x2', '\x2', '=', '\x2', '\x6', '\x3', '\x2', '\x2', '\x2', '\x4', '&', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\a', '\x5', '\x4', '\x3', '\x2', '\a', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\b', '\t', '\b', '\x3', '\x1', '\x2', 
		'\t', '\n', '\a', '\x5', '\x2', '\x2', '\n', '\v', '\x5', '\x4', '\x3', 
		'\x2', '\v', '\f', '\a', '\x6', '\x2', '\x2', '\f', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\xE', '\a', '\a', '\x2', '\x2', '\xE', '\'', '\x5', 
		'\x4', '\x3', '\f', '\xF', '\x10', '\a', '\x10', '\x2', '\x2', '\x10', 
		'\'', '\a', '\b', '\x2', '\x2', '\x11', '\x12', '\a', '\x10', '\x2', '\x2', 
		'\x12', '\'', '\a', '\t', '\x2', '\x2', '\x13', '\x14', '\a', '\x10', 
		'\x2', '\x2', '\x14', '\x15', '\a', '\n', '\x2', '\x2', '\x15', '\'', 
		'\a', '\x11', '\x2', '\x2', '\x16', '\x17', '\a', '\x10', '\x2', '\x2', 
		'\x17', '\x18', '\a', '\v', '\x2', '\x2', '\x18', '\'', '\a', '\x11', 
		'\x2', '\x2', '\x19', '\x1A', '\a', '\x10', '\x2', '\x2', '\x1A', '\x1B', 
		'\a', '\f', '\x2', '\x2', '\x1B', '\'', '\a', '\x12', '\x2', '\x2', '\x1C', 
		'\x1D', '\a', '\x10', '\x2', '\x2', '\x1D', '\x1E', '\a', '\r', '\x2', 
		'\x2', '\x1E', '\'', '\a', '\x12', '\x2', '\x2', '\x1F', ' ', '\a', '\x10', 
		'\x2', '\x2', ' ', '!', '\a', '\xE', '\x2', '\x2', '!', '\'', '\a', '\x12', 
		'\x2', '\x2', '\"', '#', '\a', '\x10', '\x2', '\x2', '#', '$', '\a', '\xF', 
		'\x2', '\x2', '$', '\'', '\a', '\x13', '\x2', '\x2', '%', '\'', '\a', 
		'\x11', '\x2', '\x2', '&', '\b', '\x3', '\x2', '\x2', '\x2', '&', '\r', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xF', '\x3', '\x2', '\x2', '\x2', '&', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '&', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x16', '\x3', '\x2', '\x2', '\x2', '&', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x1C', '\x3', '\x2', '\x2', '\x2', '&', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '&', '\"', '\x3', '\x2', '\x2', '\x2', '&', '%', 
		'\x3', '\x2', '\x2', '\x2', '\'', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'(', ')', '\f', '\xF', '\x2', '\x2', ')', '*', '\a', '\x3', '\x2', '\x2', 
		'*', '/', '\x5', '\x4', '\x3', '\x10', '+', ',', '\f', '\xE', '\x2', '\x2', 
		',', '-', '\a', '\x4', '\x2', '\x2', '-', '/', '\x5', '\x4', '\x3', '\xF', 
		'.', '(', '\x3', '\x2', '\x2', '\x2', '.', '+', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x32', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x5', 
		'&', '.', '\x30',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
