//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FilterQuery.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="FilterQueryParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public interface IFilterQueryVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="FilterQueryParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuery([NotNull] FilterQueryParser.QueryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>OrOperator</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrOperator([NotNull] FilterQueryParser.OrOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MissingOperator</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMissingOperator([NotNull] FilterQueryParser.MissingOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AndOperator</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAndOperator([NotNull] FilterQueryParser.AndOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>GreaterOperator</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterOperator([NotNull] FilterQueryParser.GreaterOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BracketOperator</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBracketOperator([NotNull] FilterQueryParser.BracketOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MatchesOperator</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMatchesOperator([NotNull] FilterQueryParser.MatchesOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LessOperator</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessOperator([NotNull] FilterQueryParser.LessOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitString([NotNull] FilterQueryParser.StringContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>EqualOperator</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualOperator([NotNull] FilterQueryParser.EqualOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>HasOperator</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitHasOperator([NotNull] FilterQueryParser.HasOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NotOperator</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotOperator([NotNull] FilterQueryParser.NotOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PresentOperator</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPresentOperator([NotNull] FilterQueryParser.PresentOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IsOperator</c>
	/// labeled alternative in <see cref="FilterQueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIsOperator([NotNull] FilterQueryParser.IsOperatorContext context);
}
